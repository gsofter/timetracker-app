scalar AnyObject
scalar Date
scalar Time
scalar DateTime
scalar JSON
scalar JSONObject
type FieldError {
  field: String!
  message: String!
}

type Query {
    dummy: Int
}

type Mutation {
    dummy: Int
}

type Subscription {
    dummy: Int
}

interface Node {
      id: ID!
}


schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
""" Database counter """
type Counter {
  """ Current amount """
  amount: Int!
}

extend type Query {
  """ Counter """
  counter: Counter

  """ Counter from Datasource """
  counterCache: Counter

  """ Moleculer Counter """
  moleculerCounter: Counter
}

extend type Mutation {
  """ Increase counter value returns current counter amount """
  addCounter(
    """ Amount to add to counter """
    amount: Int
  ): Counter

  """ sync cached counter with current value """
  syncCachedCounter: Boolean

  """ add Counter """
  addMoleculerCounter(amount: Int): Counter
}

extend type Subscription {
  """ Subscription fired when anyone increases counter """
  counterUpdated: Counter

  moleculerCounterUpdate: Counter
}
,# scalar DateTime

type Schedule {
  id: String
  title: String!
  allDay: Boolean
  start: DateTime
  end: DateTime
  desc: String
  userId: String
  resourceId: String
  tooltip: String
}

input ScheduleCreateRequest {
  title: String!
  allDay: Boolean
  start: DateTime
  end: DateTime
  desc: String
  userId: String
  resourceId: String
  tooltip: String
}

extend type Query {
  getScheduleEvents(userId: String): [Schedule]
}

extend type Mutation {
  addSchedule(request: ScheduleCreateRequest): Boolean
}
