scalar AnyObject
scalar Date
scalar Time
scalar DateTime
scalar JSON
scalar JSONObject
type FieldError {
  field: String!
  message: String!
}

type Query {
    dummy: Int
}

type Mutation {
    dummy: Int
}

type Subscription {
    dummy: Int
}

interface Node {
      id: ID!
}


schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
""" Database counter """
type Counter {
  """ Current amount """
  amount: Int!
}

extend type Query {
  """ Counter """
  counter: Counter

  """ Counter from Datasource """
  counterCache: Counter

  """ Moleculer Counter """
  moleculerCounter: Counter
}

extend type Mutation {
  """ Increase counter value returns current counter amount """
  addCounter(
    """ Amount to add to counter """
    amount: Int
  ): Counter

  """ sync cached counter with current value """
  syncCachedCounter: Boolean

  """ add Counter """
  addMoleculerCounter(amount: Int): Counter
}

extend type Subscription {
  """ Subscription fired when anyone increases counter """
  counterUpdated: Counter

  moleculerCounterUpdate: Counter
}
,# scalar DateTime

type Schedule {
  id: String
  title: String
  allDay: Boolean
  start: DateTime
  end: DateTime
  desc: String
  userId: String
  resourceId: String
  tooltip: String
  isBillable: Boolean
  submittedOn: DateTime
  reason: String
  note: String
  approvedOn: DateTime
}

input ScheduleCreateRequest {
  title: String
  allDay: Boolean
  start: DateTime
  end: DateTime
  desc: String
  userId: String
  resourceId: String
  tooltip: String
  isBillable: Boolean
  submittedOn: DateTime
  reason: String
  note: String
  approvedOn: DateTime
}

extend type Query {
  getScheduleEvents(userId: String): [Schedule]
}

extend type Mutation {
  addScheduleEvent(request: ScheduleCreateRequest): Boolean
  updateScheduleEvent(eventId: String, request: ScheduleCreateRequest): Boolean
  removeScheduleEvent(eventId: String): Boolean
}

# scalar DateTime

type Timeline {
  id: String
  title: String
  allDay: Boolean
  start: DateTime
  end: DateTime
  desc: String
  userId: String
  resourceId: String
  tooltip: String
  isBillable: Boolean
  submittedOn: DateTime
  reason: String
  note: String
  approvedOn: DateTime
}

input TimelineCreateRequest {
  title: String
  allDay: Boolean
  start: DateTime
  end: DateTime
  desc: String
  userId: String
  resourceId: String
  tooltip: String
  isBillable: Boolean
  submittedOn: DateTime
  reason: String
  note: String
  approvedOn: DateTime
}

extend type Query {
  getTimelineEvents(userId: String): [Timeline]
}

extend type Mutation {
  addTimelineEvent(request: TimelineCreateRequest): Boolean
  updateTimelineEvent(eventId: String, request: TimelineCreateRequest): Boolean
  removeTimelineEvent(eventId: String): Boolean
}
,type TimeRecord {
  id: String
  startTime: DateTime
  endTime: DateTime
  taskId: String
  taskName: String
  tags: [String]
  isBillable: Boolean
  projectId: String
  clientId: String
}

input TimeRecordRequest {
  startTime: DateTime
  endTime: DateTime
  taskName: String
  tags: [String]
  isBillable: Boolean
  projectId: String
  clientId: String
}

extend type Query {
  getTimeRecords: [TimeRecord]
  getDurationTimeRecords(startTime: DateTime, endTime: DateTime): [TimeRecord]
  getPlayingTimeRecord: TimeRecord
}

extend type Mutation {
  createTimeRecord(request: TimeRecordRequest): String
  updateTimeRecord(recordId: String, request: TimeRecordRequest): Boolean
  removeTimeRecord(recordId: String): Boolean
  removeDurationTimeRecords(startTime: DateTime, endTime: DateTime, projectId: String): Boolean
}

# scalar DateTime
enum TimesheetState {
  APPROVED_PENDING
  APPROVED
  APPROVED_FINALIZED # --- which means no going back
  DENYED
  SUBMITTED
  DENYED_FINALIZED # --- which means no going back
}

type Timesheet {
  id: ID
  startDate: Date # (only Date without time)
  endDate: Date # (only Date without time)
  state: TimesheetState
  submittedOn: DateTime
  approvedOn: DateTime
  updatedBy: String # ---> userId
  updatedOn: DateTime
}

input TimesheetCreateRequest {
  startDate: Date
  endDate: Date
  state: TimesheetState
  submittedOn: DateTime
  approvedOn: DateTime
  updatedBy: String # ---> userId
  updatedOn: DateTime
}

extend type Query {
  getTimesheets(userId: String): [Timesheet]
}

extend type Mutation {
  createTimesheet(request: TimesheetCreateRequest): Boolean
  updateTimesheet(sheetId: String, request: TimesheetCreateRequest): Boolean
  removeTimesheet(sheetId: String): Boolean
  updateTimesheetStatus(request: TimesheetCreateRequest): Boolean
}

type TimeTracker {
  userId: String
  orgId: String
  timeRecords: [TimeRecord]
  timesheets: [Timesheet]
}

type Task {
  id: String
  name: String
}

type Member {
  id: ID!
  name: String
}

type Tag {
  id: ID!
  name: String
}

type Project {
  id: String
  name: String
  clientId: [String]
  orgName: String
  teams: [String]
  tasks: [Task]
  updatedAt: DateTime
  createdAt: DateTime
}

enum StartYearWeekType {
  FIRST_FOURDAY_WEEK
  FIRST_FULL_WEEK
  FIRST_DAY_WEEK
}

type Settings {
  startWeekDay: Int
  startYearWeek: StartYearWeekType
}

extend type Query {
  getProjects: [Project]
  getTags: [Tag]
  getMembers: [Member]
  getSettings: Settings
}
