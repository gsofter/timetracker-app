type TimeRecord {
  id: String
  startTime: DateTime
  endTime: DateTime
  taskId: String
  taskName: String
  tags: [String]
  isBillable: Boolean
  projectId: String
  clientId: String
  userId: String
  orgId: String
}

input TimeRecordRequest {
  startTime: DateTime
  endTime: DateTime
  taskName: String
  tags: [String]
  isBillable: Boolean
  projectId: String
  clientId: String
  userId: String
}

extend type Query {
  getTimeRecords: [TimeRecord] @addAccountContext
  getDurationTimeRecords(startTime: DateTime, endTime: DateTime): [TimeRecord] @addAccountContext
  getPlayingTimeRecord: TimeRecord @addAccountContext
}

extend type Mutation {
  createTimeRecord(request: TimeRecordRequest): String @addAccountContext
  updateTimeRecord(recordId: String, request: TimeRecordRequest): Boolean @addAccountContext
  removeTimeRecord(recordId: String): Boolean @addAccountContext
  removeDurationTimeRecords(startTime: DateTime, endTime: DateTime, projectId: String): Boolean
    @addAccountContext
}
