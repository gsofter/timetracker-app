# scalar DateTime
enum TimesheetState {
  OPEN
  APPROVED_PENDING
  APPROVED
  APPROVED_FINALIZED # --- which means no going back
  DENYED
  SUBMITTED
  DENYED_FINALIZED # --- which means no going back
}

type Timesheet {
  id: ID
  userId: String
  startDate: DateTime
  endDate: DateTime
  state: TimesheetState
  submittedOn: DateTime
  approvedOn: DateTime
  updatedBy: String # ---> userId
  updatedOn: DateTime
}

input TimesheetCreateRequest {
  userId: String
  startDate: DateTime
  endDate: DateTime
  state: TimesheetState
  submittedOn: DateTime
  approvedOn: DateTime
  updatedBy: String # ---> userId
  updatedOn: DateTime
}

type TimesheetResponse {
  id: ID
  startDate: DateTime
  endDate: DateTime
  state: TimesheetState
  submittedOn: DateTime
  approvedOn: DateTime
  updatedBy: String # ---> userId
  updatedOn: DateTime
  userId: String
  orgId: String
}

extend type Query {
  getTimesheets(userId: String): [TimesheetResponse] @addAccountContext
  getDurationTimesheets(start: DateTime, end: DateTime): [TimesheetResponse] @addAccountContext
}

extend type Mutation {
  createTimesheet(request: TimesheetCreateRequest): Boolean @addAccountContext
  updateTimesheet(sheetId: String, request: TimesheetCreateRequest): Boolean @addAccountContext
  removeTimesheet(sheetId: String): Boolean @addAccountContext
  updateTimesheetStatus(request: TimesheetCreateRequest): Boolean @addAccountContext
}
