type TimeFrame { 
  userId: String;
  orgId: String;
  timeline: [TimeRecord];
  timesheet: [Timesheet];
}

type TimeRecord {
  startTime: DateTime # Time in milliseconds
  endTime: DateTime # time in milliseconds
  isBilling: Boolean
  taskId: String
  projectId: String
  tags: [String]
  reason: String # limit to 50 words 
}

type Timesheet {
  id: ID
  dateRange: TimesheetDateRange
  state: TimesheetState
  submittedOn: Date
  approvedOn: Date
  updatedBy: String # ---> userId
  updatedOn: Date
}

type TimesheetDateRange {
  startDate: Date # (only Date without time, ex. 01/20/2021) 
  endDate: Date # (only Date without time)
}

enum TimesheetState {
    APPROVED_PENDING
    APPROVED
    APPROVED_FINALIZED # --- which means no going back
    DENYED
    SUBMITTED
    DENYED_FINALIZED # --- which means no going back
}

input TimeRecordRequest {
  startTime: DateTime
  endTime: DateTime
  task: String
  tags: [String]
  isBillable: Boolean
  projectId: String
  clientId: String
  totalTime: Int
}

extend type Query {
  getTimeRecords: [TimeRecord]
  getPlayingTimeRecord: TimeRecord
}

extend type Mutation {
  createTimeRecord(request: TimeRecordRequest): String
  updateTimeRecord(recordId: String, request: TimeRecordRequest): Boolean
  removeTimeRecord(recordId: String): Boolean
}

